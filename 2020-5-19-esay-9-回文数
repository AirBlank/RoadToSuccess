class Solution {
    
    public boolean isPalindrome(int x) {
        // 特殊情况：
        // 如上所述，当 x < 0 时，x 不是回文数。
        // 同样地，如果数字的最后一位是 0，为了使该数字为回文，
        // 则其第一位数字也应该是 0
        // 只有 0 满足这一属性
        //如果是负数 或者 以0结尾 必定不是回文数 
        if(x < 0 || (x % 10 == 0 && x != 0)) {
            return false;
        }

        int revertedNumber = 0;
        //x % 10得到最后一位；每次 *10 再加上余数 
        //就可以得到反转数字的值（正常看来的值比如 21 反转值为 12）
        while(x > revertedNumber) {
            revertedNumber = revertedNumber * 10 + x % 10;
            x /= 10;
        }
        // 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。
        // 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，
        // 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。
        return x == revertedNumber || x == revertedNumber/10;
    }
    
        
}

/*
//return String.valueOf(x).equals(new StringBuilder(String.valueOf(x)).reverse().toString());
         //边界判断
        if (x < 0) return false;
        int div = 1;
        //先让div乘到 和x 一样大的对应位数
        while (x / div >= 10) div *= 10;
        while (x > 0) {
            //取出第一位
            int left = x / div;
            //取出最后一位
            int right = x % 10;
            //相等 则继续
            if (left != right) return false;
            //x先%div 去掉第一位
            //再除10 去掉最后一位
            x = (x % div) / 10;
            //上面一行 一共去掉2位
            //所以div要缩小2位 也就是100倍
            div /= 100;
        }
        return true;
*/
