class Solution {
    //dp
    public int maxValue(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        //当 gridgrid 矩阵很大时， i = 0或 j = 0的情况仅占极少数，相当循环每轮都冗余了一次判断。因此，可先初始化矩阵第一行和第一列，再开始遍历递推。
        for(int j = 1; j < n; j++) // 初始化第一行
            grid[0][j] += grid[0][j - 1];
        for(int i = 1; i < m; i++) // 初始化第一列
            grid[i][0] += grid[i - 1][0];
        for(int i = 1; i < m; i++) {
            for(int j = 1; j < n; j++) {
                //当i 和 j都是0直接跳过
                //if(i == 0 && j == 0) continue;
                //i == 0 说明只能从左侧获取值 上面已经到顶了
                //if(i == 0) grid[i][j] += grid[i][j - 1] ;
                //else if(j == 0) grid[i][j] += grid[i - 1][j]; //j == 0即左侧到顶 只能从上侧获取值
                //else 
                grid[i][j] += Math.max(grid[i][j - 1], grid[i - 1][j]); //上侧和左侧都不为0 则可以获取2个之中大的那一个
            }
        }
        return grid[m - 1][n - 1];
    }
}
