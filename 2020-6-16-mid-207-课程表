class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if(numCourses == 0 || prerequisites == null)return false;
        //入度表
        int[] inDegree = new int[numCourses];
        //队列 保存入度为0的节点
        Queue<Integer> queue = new LinkedList<>();
        //统计入度
        for(int[] temp : prerequisites){
            inDegree[temp[0]]++;
        }
        //先把入度为0的节点加入
        for(int i = 0;i < numCourses;i++){
            if(inDegree[i] == 0)queue.offer(i);
        }
        while(!queue.isEmpty()){
            int current = queue.poll();
            numCourses--;
            for(int[] flag : prerequisites){
                if(current == flag[1]){
                    inDegree[flag[0]]--;
                    if(inDegree[flag[0]] == 0)queue.offer(flag[0]);
                }
            }
        }
        return numCourses == 0;
    }
}
