class Solution {
    //用来标识 先手 后手
    class Pair {
        int fir, sec;
        Pair(int fir, int sec) {
            this.fir = fir;
            this.sec = sec;
        }
    }
    
    public boolean stoneGame(int[] piles) {
        int n = piles.length;
        // 初始化 dp 数组
        /*
        dp[i][j].fir 表示，对于 piles[i...j] 这部分石头堆，先手能获得的最高分数。
        dp[i][j].sec 表示，对于 piles[i...j] 这部分石头堆，后手能获得的最高分数。

        举例理解一下，假设 piles = [3, 9, 1, 2]，索引从 0 开始
        dp[0][1].fir = 9 意味着：面对石头堆 [3, 9]，先手最终能够获得 9 分。
        dp[1][3].sec = 2 意味着：面对石头堆 [9, 1, 2]，后手最终能够获得 2 分。
        */
        /*
        dp[i][j][fir or sec]
        其中：
        0 <= i < piles.length
        i <= j < piles.length  j的值是受到i的限制 j必须大于等于i
        */
        /*
        大体框架：
        n = piles.length
        for 0 <= i < n:
            for j <= i < n:
                for who in {fir, sec}:
                    dp[i][j][who] = max(left, right)
        */
        /*
        dp[i][j].fir = max(piles[i] + dp[i+1][j].sec, piles[j] + dp[i][j-1].sec)
        dp[i][j].fir = max(    选择最左边的石头堆     ,     选择最右边的石头堆     )
        # 解释：我作为先手，面对 piles[i...j] 时，有两种选择：
        # 要么我选择最左边的那一堆石头，然后面对 piles[i+1...j]
        # 但是此时轮到对方，相当于我变成了后手；
        # 要么我选择最右边的那一堆石头，然后面对 piles[i...j-1]
        # 但是此时轮到对方，相当于我变成了后手。

        if 先手选择左边:
            dp[i][j].sec = dp[i+1][j].fir
        if 先手选择右边:
            dp[i][j].sec = dp[i][j-1].fir
        # 解释：我作为后手，要等先手先选择，有两种情况：
        # 如果先手选择了最左边那堆，给我剩下了 piles[i+1...j]
        # 此时轮到我，我变成了先手；
        # 如果先手选择了最右边那堆，给我剩下了 piles[i...j-1]
        # 此时轮到我，我变成了先手。
        */
        Pair[][] dp = new Pair[n][n];
        for (int i = 0; i < n; i++) 
            for (int j = i; j < n; j++)
                dp[i][j] = new Pair(0, 0);
        // 填入 base case
        /*
        dp[i][j].fir = piles[i]
        dp[i][j].sec = 0
        其中 0 <= i == j < n
        解释：i 和 j 相等就是说面前只有一堆石头 piles[i]
        那么显然先手的得分为 piles[i]
        后手没有石头拿了，得分为 0
        */
        for (int i = 0; i < n; i++) {
            dp[i][i].fir = piles[i];
            dp[i][i].sec = 0;
        }
        // 斜着遍历数组
        for (int l = 2; l <= n; l++) {
            for (int i = 0; i <= n - l; i++) {
                int j = l + i - 1;
                // 先手选择最左边或最右边的分数
                //先手选择左边 则分数就是piles[i] + dp[i+1][j].sec
                //先手选择右边 则分数就是piles[j] + dp[i][j-1].sec;
                int left = piles[i] + dp[i+1][j].sec;
                int right = piles[j] + dp[i][j-1].sec;
                // 套用状态转移方程
                if (left > right) {
                    //先手选择左边
                    dp[i][j].fir = left;
                    //后手就是[i+1][j].fir 变成先手
                    dp[i][j].sec = dp[i+1][j].fir;
                } else {
                    //先手选择右边
                    dp[i][j].fir = right;
                     //后手就是[i][j-1].fir 变成先手
                    dp[i][j].sec = dp[i][j-1].fir;
                }
            }
        }
        Pair res = dp[0][n-1];
        return res.fir > res.sec;
    }
}
