class Solution {
    public void sortColors(int[] nums) {
        //current指向当前下标元素
        //p0是0的右边界
        //p2是2的左边界
        int current = 0,p0 = 0,p2 = nums.length - 1;
        int temp = 0;
        while(current <= p2){
            if(nums[current] == 0){
                //遇到0
                //交换 p0和current
                temp = nums[current];
                nums[current] = nums[p0];
                nums[p0] = temp;
                //这里需要current和p0都右移
                current++;
                p0++;
            }else if(nums[current] == 2){
                //遇到2
                //交换p2和current
                temp = nums[current];
                nums[current] = nums[p2];
                nums[p2] = temp;
                //这里只需要p2左移
                //为什么current不右移呢？
                //因为current被换过来的值可能是0可能是1，无法保证，所以要下一轮循环检查
                /*
                题解少了一个状态维持的关键说明：
                curr 左边全都是0/1的有序序列！
                curr位置是0时，与左边的0位置交换，因为保证curr左边全是0/1, 所以交换过来的必然是0/1，状态维持住了；
                curr位置是2时，交换后，curr不能移动，因为一移动，没法保证交换过来的是0/1；所以这里不移动；这时状态也维持住了
                只要我们保证curr左边的都是0,1，才移动，那么0都被放到左边，2都被放到右边，中间自然是1了； 
                综上，这是一个关键状态说明，有了这个说明，逻辑才更加清楚；
                */
                p2--;
            }else{
                //遇到1 往后移动
                current++;
            }
        }
    }
}
