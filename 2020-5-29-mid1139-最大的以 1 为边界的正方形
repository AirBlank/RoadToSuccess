class Solution {
    public int largest1BorderedSquare(int[][] grid) {
        int maxLength = Math.min(grid.length,grid[0].length);
        do{
            for(int i = 0;i <= grid.length - maxLength;i++){
                for(int j = 0;j <= grid[0].length - maxLength;j++){
                    boolean temRes = true;
                    //判断此正方形是否满足全为0
                    for(int k = 0;k <maxLength;k++){
                        //判断第一行               第一列              //最后一行                           //最后一列
                        if(grid[i][j + k] == 0 ||grid[i + k][j] == 0 || grid[i + maxLength - 1][j + k] == 0 || grid[i + k][j + maxLength - 1] == 0){
                            temRes = false;
                            break;
                        }
                    }
                    if(temRes)return maxLength * maxLength;
                }
            }
        }while(--maxLength > 0);
        return 0;
    }
}
