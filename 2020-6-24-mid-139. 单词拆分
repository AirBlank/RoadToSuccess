class Solution {
    //bfs + 记忆
    /*
    public boolean wordBreak(String s, List<String> wordDict) {
        return dfs(s,new HashSet<String>(wordDict),0,new Boolean[s.length()]);
    }   
    private boolean dfs(String s, Set<String> wordDict, int start,Boolean[] memory){
        if(start == s.length())return true;
        //可能存在解 也可能不存在解 所以返回对应的内容
        if(memory[start] != null)return memory[start];
        for(int j = start + 1;j <= s.length();j++){
            if(wordDict.contains(s.substring(start,j)) && dfs(s,wordDict,j,memory)){
                memory[start] = true;
                return true;
            }
        }
        memory[start] = false;
        return false;
    }*/

    //dp
    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> wordDictSet=new HashSet(wordDict);
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true;
        for (int i = 1; i <= s.length(); i++) {
            for (int j = 0; j < i; j++) {
                //如果字符串能0 ~ i 能被分成 0 ~ j 和 j+1 ~ i 那就说明可以组成
                if (dp[j] && wordDictSet.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[s.length()];
    }
}
