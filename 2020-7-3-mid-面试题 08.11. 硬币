class Solution {
    public int waysToChange(int n) {
        //可以看做零钱兑换
        //dp[i][j] 表示 i 种硬币组成面值为 j 时的方法数
        int[][] dp = new int[5][n + 1];
        //硬币
        int[] coins = new int[]{1,5,10,25};
        //第一行i = 0 即0种硬币（没有硬币） 说明就是0个方法（我想要硬币 但是没有硬币给我，没有方案） 值为0 数组自动初始化为0 不用去管
        //第一列j = 0 即0种价值（没有价值） 说明不需要硬币（我不要硬币 也算一种方案），就是一个方法 值为0
        for(int i = 1;i <= 4;i++){
            dp[i][0] = 1;
        }
        //i即 一共有四种硬币 
        for(int i = 1; i <= 4;i++){
            //面值从1到n
            for(int j = 1;j <= n;j++){
                //先看看当前能不能换得了
                //即如果当前面值比硬币小 那就换不了
                if(j < coins[i - 1]){
                    //换不了那就是之前的
                    dp[i][j] = dp[i - 1][j] % 1000000007;
                }else{
                    //其中 dp[i - 1][j] 表示当前硬币不选，那么由 i - 1 种组成面值 j
                    //dp[i][j - coins[i]) 表示当前硬币选了，那么还需要组成面额为 j - coins[i], 这都是已要组成的面值大于当前硬币值为前提的。
                    //当前面值比硬币大 那就可以换 之前的加上现在换的 现在换的一定要-coins[i] 因为你换了这个硬币就要减去这个面值
                    dp[i][j] = (dp[i - 1][j] + dp[i][j - coins[i - 1]]) % 1000000007;
                }
            }
        }
        return dp[4][n];
    }
}
